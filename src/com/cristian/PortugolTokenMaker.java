/* The following code was generated by JFlex 1.4.1 on 27/10/15 09:36 */
package com.cristian;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1 on 27/10/15 09:36 from the
 * specification file
 * <tt>/home/cristian/√Årea de Trabalho/JCEditor/PortugolTokenMaker.flex</tt>
 */
public class PortugolTokenMaker extends AbstractJFlexCTokenMaker {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int EOL_COMMENT = 2;
    public static final int YYINITIAL = 0;
    public static final int MLC = 1;

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED
            = "\11\0\1\47\1\42\1\0\1\47\1\57\22\0\1\47\1\35\1\43"
            + "\1\60\1\61\1\66\1\65\1\33\1\31\1\31\1\50\1\7\1\65"
            + "\1\36\1\55\1\32\1\46\1\54\2\40\4\5\2\3\1\71\1\64"
            + "\1\34\1\30\1\34\1\27\1\62\1\4\1\53\2\4\1\6\1\56"
            + "\5\1\1\52\10\1\1\51\2\1\1\41\2\1\1\63\1\37\1\63"
            + "\1\76\1\2\1\0\1\24\1\45\1\21\1\10\1\11\1\12\1\25"
            + "\1\67\1\13\2\1\1\15\1\26\1\14\1\20\1\23\1\73\1\17"
            + "\1\16\1\70\1\22\1\44\1\72\1\74\2\1\1\75\1\76\1\75"
            + "\1\65\uff81\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0
            = "\3\0\1\1\1\2\1\3\1\4\1\2\1\5\13\2"
            + "\1\1\1\4\1\6\1\4\1\7\1\4\1\1\1\4"
            + "\1\2\1\10\1\11\1\2\1\3\1\12\1\4\1\1"
            + "\3\2\2\13\1\14\5\13\1\15\2\13\2\16\2\3"
            + "\1\17\14\2\1\5\1\2\1\5\14\2\1\0\1\20"
            + "\1\21\2\22\1\23\1\7\2\11\1\24\2\2\2\16"
            + "\6\1\1\0\2\2\2\0\1\25\6\0\1\3\1\0"
            + "\1\3\1\16\1\17\4\2\1\5\5\2\1\5\20\2"
            + "\1\7\1\26\1\7\3\22\1\7\2\11\1\27\2\2"
            + "\2\30\4\1\1\31\4\1\6\0\1\2\10\0\1\17"
            + "\1\0\17\2\1\32\11\2\1\7\1\11\1\2\2\30"
            + "\7\1\4\0\1\31\6\0\1\33\2\0\1\34\21\2"
            + "\1\5\4\2\1\30\1\31\3\1\13\0\16\2\2\1"
            + "\1\31\3\0\1\5\11\2\2\0\5\2";

    private static int[] zzUnpackAction() {
        int[] result = new int[313];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0
            = "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"
            + "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"
            + "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9"
            + "\0\u05e8\0\u056a\0\u056a\0\u0627\0\275\0\u056a\0\u0666\0\u06a5"
            + "\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u056a\0\u07e0\0\u081f\0\u085e"
            + "\0\u089d\0\u056a\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\u056a"
            + "\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0"
            + "\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8"
            + "\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0"
            + "\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8"
            + "\0\u11f7\0\u1236\0\u1275\0\u056a\0\u056a\0\u12b4\0\u12f3\0\u056a"
            + "\0\u1332\0\u1371\0\u13b0\0\u056a\0\u13ef\0\u142e\0\u146d\0\u14ac"
            + "\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4"
            + "\0\u16e3\0\u1722\0\u1761\0\u056a\0\u17a0\0\u17df\0\u181e\0\u185d"
            + "\0\u189c\0\u18db\0\u191a\0\u1959\0\u0a95\0\u1998\0\u0a95\0\u19d7"
            + "\0\u1a16\0\u1a55\0\u1a94\0\374\0\u1ad3\0\u1b12\0\u1b51\0\u1b90"
            + "\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88"
            + "\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80"
            + "\0\u1fbf\0\u1ffe\0\u203d\0\u056a\0\u207c\0\u20bb\0\u20fa\0\u2139"
            + "\0\u2178\0\u21b7\0\u21f6\0\u056a\0\u2235\0\u2274\0\u22b3\0\u22f2"
            + "\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea"
            + "\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2"
            + "\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da"
            + "\0\u2919\0\u2958\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u2ad2"
            + "\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca"
            + "\0\u2d09\0\374\0\u2d48\0\u2d87\0\u2dc6\0\u2e05\0\u2e44\0\u2e83"
            + "\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u307b"
            + "\0\u30ba\0\u30f9\0\u3138\0\u3177\0\u31b6\0\u31f5\0\u3234\0\u3273"
            + "\0\u32b2\0\u32f1\0\u3330\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u346b"
            + "\0\u34aa\0\u34e9\0\u3528\0\u3567\0\u35a6\0\u35e5\0\u3624\0\u3663"
            + "\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u379e\0\u37dd\0\u381c\0\u385b"
            + "\0\u389a\0\u38d9\0\u3918\0\u3957\0\u3996\0\u39d5\0\u3a14\0\u3a53"
            + "\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u0a95\0\275\0\u3b8e\0\u3bcd"
            + "\0\u3c0c\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47\0\u3d86\0\u3dc5"
            + "\0\u3e04\0\u3528\0\u3e43\0\u35e5\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f"
            + "\0\u3f7e\0\u3fbd\0\u3ffc\0\u403b\0\u407a\0\u40b9\0\u40f8\0\u4137"
            + "\0\u4176\0\u41b5\0\u41f4\0\u4233\0\u056a\0\u4272\0\u42b1\0\u42f0"
            + "\0\u432f\0\u436e\0\u43ad\0\u43ec\0\u442b\0\u446a\0\u44a9\0\u44e8"
            + "\0\u4527\0\u4566\0\u45a5\0\u45e4\0\u4623\0\u4662\0\u46a1\0\u46e0"
            + "\0\u471f";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[313];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0
            = "\1\4\2\5\1\6\1\5\1\6\1\5\1\7\1\10"
            + "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"
            + "\1\21\1\5\1\22\1\23\1\5\1\24\1\25\1\26"
            + "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\6"
            + "\1\5\1\36\1\37\1\40\1\5\1\41\1\42\1\26"
            + "\3\5\1\6\1\43\1\5\1\33\1\44\2\4\1\27"
            + "\1\45\1\32\1\26\1\5\1\46\1\32\2\5\1\47"
            + "\1\27\1\32\12\50\1\51\27\50\1\52\5\50\1\53"
            + "\16\50\1\54\2\50\1\55\4\50\12\56\1\57\27\56"
            + "\1\60\24\56\1\61\2\56\1\62\4\56\7\4\1\0"
            + "\17\4\10\0\3\4\2\0\3\4\2\0\4\4\1\0"
            + "\1\4\1\0\3\4\4\0\2\4\1\0\3\4\2\0"
            + "\1\4\6\5\1\0\17\5\10\0\1\4\2\5\2\0"
            + "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"
            + "\1\4\4\0\2\5\1\0\3\5\2\0\3\63\1\6"
            + "\1\63\1\6\1\64\1\0\1\63\1\64\3\63\1\65"
            + "\4\63\1\66\4\63\10\0\1\63\1\6\1\63\2\0"
            + "\2\63\1\6\2\0\1\66\1\65\1\63\1\6\1\67"
            + "\1\63\1\0\3\63\4\0\2\63\1\0\3\63\11\0"
            + "\1\32\20\0\1\32\46\0\1\4\6\5\1\0\1\5"
            + "\1\70\15\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\4\5"
            + "\1\71\1\5\1\72\2\5\1\73\5\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\3\5\1\74\6\5\1\75\1\5"
            + "\1\76\2\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\4\5"
            + "\1\77\12\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\12\5"
            + "\1\100\1\5\1\73\2\5\10\0\1\4\2\5\2\0"
            + "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"
            + "\1\4\4\0\2\5\1\0\3\5\2\0\1\4\6\5"
            + "\1\0\1\5\1\101\1\5\1\102\4\5\1\103\6\5"
            + "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"
            + "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"
            + "\3\5\2\0\1\4\6\5\1\0\1\5\1\104\15\5"
            + "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"
            + "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"
            + "\3\5\2\0\1\4\6\5\1\0\1\5\1\105\15\5"
            + "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"
            + "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"
            + "\3\5\2\0\1\4\6\5\1\0\12\5\1\106\4\5"
            + "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"
            + "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"
            + "\3\5\2\0\1\4\6\5\1\0\7\5\1\107\1\110"
            + "\3\5\1\111\2\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\7\5\1\112\1\113\3\5\1\114\2\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\5\5\1\115\1\116\10\5\10\0"
            + "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"
            + "\1\0\1\4\1\5\1\4\4\0\1\5\1\117\1\0"
            + "\3\5\2\0\1\4\6\5\1\0\3\5\1\120\4\5"
            + "\1\121\3\5\1\122\2\5\10\0\1\4\2\5\2\0"
            + "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"
            + "\1\4\4\0\2\5\1\0\3\5\31\0\1\123\77\0"
            + "\1\32\175\0\1\32\1\0\1\124\15\0\1\125\26\0"
            + "\27\126\1\127\3\126\1\130\3\126\1\131\2\126\1\0"
            + "\34\126\30\0\1\32\5\0\1\32\40\0\37\37\1\132"
            + "\2\37\1\133\1\134\33\37\1\4\6\5\1\0\1\5"
            + "\1\135\12\5\1\136\2\5\10\0\1\4\2\5\2\0"
            + "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"
            + "\1\4\4\0\2\5\1\0\3\5\2\0\3\63\1\6"
            + "\1\63\1\6\1\64\1\0\1\63\1\64\3\63\1\65"
            + "\4\63\1\66\4\63\10\0\1\63\1\6\1\137\2\0"
            + "\1\63\1\140\1\6\2\0\1\66\1\65\1\140\1\6"
            + "\1\67\1\63\1\0\3\63\4\0\2\63\1\0\2\63"
            + "\1\137\51\0\1\42\32\0\1\67\1\0\1\67\32\0"
            + "\1\67\5\0\1\67\5\0\1\67\22\0\7\4\1\0"
            + "\1\141\1\142\1\4\1\143\1\4\1\144\4\4\1\145"
            + "\1\146\3\4\10\0\3\4\2\0\3\4\1\147\1\0"
            + "\4\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"
            + "\3\4\2\0\1\4\6\5\1\0\3\5\1\150\13\5"
            + "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"
            + "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"
            + "\3\5\2\0\1\4\6\5\1\0\10\5\1\151\6\5"
            + "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"
            + "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"
            + "\3\5\2\0\12\50\1\0\27\50\1\0\5\50\1\0"
            + "\16\50\1\0\2\50\1\0\4\50\13\0\1\152\54\0"
            + "\1\153\40\0\1\154\134\0\1\155\100\0\1\156\4\0"
            + "\12\56\1\0\27\56\1\0\24\56\1\0\2\56\1\0"
            + "\4\56\13\0\1\157\54\0\1\160\76\0\1\161\100\0"
            + "\1\162\4\0\7\63\1\0\17\63\10\0\3\63\2\0"
            + "\3\63\2\0\4\63\1\0\1\63\1\0\3\63\4\0"
            + "\2\63\1\0\3\63\2\0\3\63\1\163\1\63\1\163"
            + "\1\63\1\164\17\63\7\0\1\164\1\63\1\163\1\63"
            + "\2\0\2\63\1\163\2\0\3\63\1\163\1\0\1\63"
            + "\1\0\3\63\4\0\2\63\1\0\3\63\2\0\7\63"
            + "\1\0\12\63\1\165\4\63\10\0\3\63\2\0\3\63"
            + "\2\0\1\165\3\63\1\0\1\63\1\0\3\63\4\0"
            + "\2\63\1\0\3\63\2\0\7\63\1\0\5\63\1\165"
            + "\11\63\10\0\3\63\2\0\3\63\2\0\1\63\1\165"
            + "\2\63\1\0\1\63\1\0\3\63\4\0\2\63\1\0"
            + "\3\63\2\0\3\63\1\67\1\63\1\67\1\166\1\0"
            + "\1\63\1\166\1\167\2\63\1\167\11\63\10\0\1\63"
            + "\1\67\1\63\2\0\2\63\1\67\2\0\1\63\1\167"
            + "\1\63\1\67\1\0\1\167\1\0\3\63\4\0\2\63"
            + "\1\0\3\63\2\0\1\4\6\5\1\0\17\5\10\0"
            + "\1\4\2\5\2\0\1\5\1\170\1\5\2\0\4\5"
            + "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"
            + "\1\0\3\5\2\0\1\4\6\5\1\0\17\5\10\0"
            + "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"
            + "\1\0\1\4\1\5\1\4\4\0\1\5\1\171\1\0"
            + "\1\5\1\172\1\5\2\0\1\4\6\5\1\0\11\5"
            + "\1\173\5\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\10\5"
            + "\1\174\6\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\16\5"
            + "\1\175\10\0\1\4\2\5\2\0\3\5\2\0\4\5"
            + "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"
            + "\1\0\3\5\2\0\1\4\6\5\1\0\4\5\1\176"
            + "\12\5\10\0\1\4\2\5\2\0\3\5\2\0\4\5"
            + "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"
            + "\1\0\3\5\2\0\1\4\6\5\1\0\5\5\1\177"
            + "\3\5\1\200\5\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\3\5\1\201\13\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\1\5\1\202\1\0\3\5\2\0\1\4\6\5"
            + "\1\0\16\5\1\203\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\3\5\1\200\13\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\16\5\1\204\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\15\5"
            + "\1\205\1\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\4\5"
            + "\1\171\12\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\13\5"
            + "\1\206\1\207\2\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\1\5\1\210\1\0\3\5\2\0\1\4\6\5"
            + "\1\0\17\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\1\5\1\211\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\10\5\1\212\6\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\13\5\1\101\2\5\1\213\10\0\1\4\2\5\2\0"
            + "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"
            + "\1\4\4\0\2\5\1\0\3\5\2\0\1\4\6\5"
            + "\1\0\1\214\5\5\1\73\1\215\7\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\10\5\1\216\6\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\6\5\1\174\10\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\6\5\1\177\1\200\2\5\1\217"
            + "\4\5\10\0\1\4\2\5\2\0\3\5\2\0\4\5"
            + "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"
            + "\1\0\3\5\2\0\1\4\6\5\1\0\1\5\1\220"
            + "\13\5\1\221\1\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\11\5\1\174\5\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\1\5\1\174\15\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\4\5\1\222\12\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\1\174\16\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\3\5"
            + "\1\222\13\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\32\0\7\32\40\0\33\223\1\224"
            + "\6\223\1\0\63\223\1\225\3\223\1\224\6\223\1\0"
            + "\41\223\1\226\4\223\1\126\1\223\1\126\2\223\1\126"
            + "\4\223\1\126\2\223\1\126\3\223\1\227\3\223\1\126"
            + "\1\230\1\231\1\0\3\126\1\230\5\223\1\230\13\223"
            + "\1\126\3\223\1\231\2\223\5\133\1\37\4\133\1\37"
            + "\1\133\1\37\2\133\1\37\4\133\1\37\2\133\1\37"
            + "\3\133\1\37\3\133\2\37\1\232\1\0\4\37\5\133"
            + "\1\37\13\133\1\37\3\133\1\232\41\133\1\233\3\133"
            + "\1\234\33\133\1\4\6\5\1\0\7\5\1\235\7\5"
            + "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"
            + "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\236"
            + "\1\0\3\5\2\0\1\4\6\5\1\0\7\5\1\174"
            + "\7\5\10\0\1\4\2\5\2\0\3\5\2\0\4\5"
            + "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"
            + "\1\0\3\5\2\0\3\63\4\237\1\0\3\237\6\63"
            + "\1\237\2\63\1\237\2\63\10\0\1\63\1\237\1\63"
            + "\2\0\1\63\2\237\2\0\2\63\2\237\1\0\1\237"
            + "\1\0\3\63\4\0\2\63\1\0\3\63\2\0\7\63"
            + "\1\0\17\63\10\0\3\63\2\0\2\63\1\240\2\0"
            + "\3\63\1\240\1\0\1\63\1\0\3\63\4\0\2\63"
            + "\1\0\3\63\2\0\7\4\1\0\1\4\1\241\15\4"
            + "\10\0\3\4\2\0\3\4\2\0\4\4\1\0\1\4"
            + "\1\0\3\4\4\0\2\4\1\0\3\4\2\0\7\4"
            + "\1\0\4\4\1\242\1\243\1\4\1\244\7\4\10\0"
            + "\3\4\2\0\3\4\2\0\4\4\1\0\1\4\1\0"
            + "\3\4\4\0\2\4\1\0\3\4\2\0\7\4\1\0"
            + "\2\4\1\245\1\4\1\246\12\4\10\0\3\4\2\0"
            + "\3\4\2\0\4\4\1\0\1\4\1\0\3\4\4\0"
            + "\2\4\1\0\3\4\2\0\7\4\1\0\3\4\1\247"
            + "\13\4\10\0\3\4\2\0\3\4\2\0\4\4\1\0"
            + "\1\4\1\0\3\4\4\0\2\4\1\0\3\4\2\0"
            + "\7\4\1\0\4\4\1\250\12\4\10\0\3\4\2\0"
            + "\3\4\2\0\4\4\1\0\1\4\1\0\3\4\4\0"
            + "\2\4\1\0\3\4\2\0\7\4\1\0\7\4\1\251"
            + "\7\4\10\0\3\4\2\0\3\4\2\0\4\4\1\0"
            + "\1\4\1\0\3\4\4\0\2\4\1\0\3\4\12\0"
            + "\1\252\1\253\1\0\1\254\1\0\1\255\4\0\1\256"
            + "\1\257\23\0\1\147\27\0\1\4\6\5\1\0\16\5"
            + "\1\260\10\0\1\4\2\5\2\0\3\5\2\0\4\5"
            + "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"
            + "\1\0\3\5\2\0\1\4\6\5\1\0\12\5\1\174"
            + "\4\5\10\0\1\4\2\5\2\0\3\5\2\0\4\5"
            + "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"
            + "\1\0\3\5\17\0\1\261\104\0\1\262\143\0\1\263"
            + "\100\0\1\264\21\0\1\265\104\0\1\266\143\0\1\267"
            + "\100\0\1\270\4\0\3\63\1\163\1\63\1\163\1\63"
            + "\1\0\5\63\1\65\4\63\1\66\4\63\10\0\1\63"
            + "\1\163\1\63\2\0\2\63\1\163\2\0\1\66\1\65"
            + "\1\63\1\163\1\0\1\63\1\0\3\63\4\0\2\63"
            + "\1\0\3\63\5\0\1\163\1\0\1\163\32\0\1\163"
            + "\5\0\1\163\5\0\1\163\22\0\3\63\1\271\1\63"
            + "\1\271\1\63\1\272\17\63\7\0\1\272\1\63\1\271"
            + "\1\63\2\0\2\63\1\271\2\0\3\63\1\271\1\0"
            + "\1\63\1\0\3\63\4\0\2\63\1\0\3\63\2\0"
            + "\1\4\6\5\1\0\12\5\1\273\4\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\14\5\1\73\2\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\12\5\1\274\4\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\7\5\1\275\1\276\6\5\10\0"
            + "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"
            + "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"
            + "\2\0\1\4\6\5\1\0\1\5\1\277\1\300\3\5"
            + "\1\117\1\301\3\5\1\302\1\303\2\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\11\5\1\171\5\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\6\5\1\73\10\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\14\5\1\174\2\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\11\5\1\304\5\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\1\5\1\305\15\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\13\5\1\306\3\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\13\5\1\307\3\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\3\5\1\310\13\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\3\5\1\311\13\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\5\5\1\312\11\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\10\5\1\313\6\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\7\5\1\314\7\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\4\5\1\315\12\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\13\5\1\136\3\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\1\5\1\316\15\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\14\5\1\317\2\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\11\5\1\320\5\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\6\5\1\200\10\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\14\5\1\321\2\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\10\5\1\322\6\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\12\5\1\323\4\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\33\223\1\130\6\223\1\0\64\223\3\126\1\227\3\126"
            + "\3\223\1\0\41\223\1\126\25\223\1\224\4\223\1\126"
            + "\1\223\1\0\3\223\1\126\5\223\1\126\22\223\33\0"
            + "\1\224\43\0\5\223\1\226\25\223\1\224\4\223\1\226"
            + "\1\223\1\0\3\223\1\226\5\223\1\226\25\223\4\324"
            + "\1\223\3\324\6\223\1\324\2\223\1\324\6\223\1\130"
            + "\4\223\1\324\1\223\1\0\2\223\2\324\4\223\2\324"
            + "\1\223\1\324\20\223\3\133\4\325\1\133\3\325\6\133"
            + "\1\325\2\133\1\325\12\133\1\233\1\325\2\133\1\234"
            + "\1\133\2\325\4\133\2\325\1\133\1\325\62\133\1\0"
            + "\34\133\1\4\6\5\1\0\1\326\16\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\10\5\1\136\6\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\3\63\4\237\1\0\3\237\2\63\1\327\3\63\1\237"
            + "\1\330\1\63\1\237\2\63\10\0\1\63\1\237\1\63"
            + "\2\0\1\63\2\237\2\0\1\330\1\327\2\237\1\0"
            + "\1\237\1\0\3\63\4\0\2\63\1\0\3\63\2\0"
            + "\7\63\1\0\5\63\1\327\4\63\1\330\4\63\10\0"
            + "\3\63\2\0\2\63\1\240\2\0\1\330\1\327\1\63"
            + "\1\240\1\0\1\63\1\0\3\63\4\0\2\63\1\0"
            + "\3\63\2\0\7\4\1\0\2\4\1\144\14\4\10\0"
            + "\3\4\2\0\3\4\2\0\4\4\1\0\1\4\1\0"
            + "\3\4\4\0\2\4\1\0\3\4\2\0\7\4\1\0"
            + "\1\331\16\4\10\0\3\4\2\0\3\4\2\0\4\4"
            + "\1\0\1\4\1\0\3\4\4\0\2\4\1\0\3\4"
            + "\2\0\7\4\1\0\3\4\1\332\2\4\1\333\10\4"
            + "\10\0\3\4\2\0\3\4\2\0\4\4\1\0\1\4"
            + "\1\0\3\4\4\0\2\4\1\0\3\4\2\0\7\4"
            + "\1\0\7\4\1\334\7\4\10\0\3\4\2\0\3\4"
            + "\2\0\4\4\1\0\1\4\1\0\3\4\4\0\2\4"
            + "\1\0\3\4\2\0\7\4\1\0\1\335\3\4\1\250"
            + "\12\4\10\0\3\4\2\0\3\4\2\0\4\4\1\0"
            + "\1\4\1\0\3\4\4\0\2\4\1\0\3\4\2\0"
            + "\7\4\1\0\11\4\1\336\5\4\10\0\3\4\2\0"
            + "\3\4\2\0\4\4\1\0\1\4\1\0\3\4\4\0"
            + "\2\4\1\0\3\4\2\0\7\4\1\0\4\4\1\333"
            + "\12\4\10\0\3\4\2\0\3\4\2\0\4\4\1\0"
            + "\1\4\1\0\3\4\4\0\2\4\1\0\3\4\2\0"
            + "\7\4\1\0\1\335\16\4\10\0\3\4\2\0\3\4"
            + "\2\0\4\4\1\0\1\4\1\0\3\4\4\0\2\4"
            + "\1\0\3\4\2\0\7\4\1\0\14\4\1\337\2\4"
            + "\10\0\3\4\2\0\3\4\2\0\4\4\1\0\1\4"
            + "\1\0\3\4\4\0\2\4\1\0\3\4\13\0\1\340"
            + "\101\0\1\341\1\342\1\0\1\343\71\0\1\344\1\0"
            + "\1\345\75\0\1\346\77\0\1\347\101\0\1\350\57\0"
            + "\1\4\6\5\1\0\1\5\1\136\15\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\13\0"
            + "\1\262\156\0\1\351\30\0\1\352\130\0\1\353\32\0"
            + "\1\266\156\0\1\354\30\0\1\355\130\0\1\356\21\0"
            + "\3\63\1\271\1\63\1\271\1\63\1\0\2\63\1\167"
            + "\2\63\1\167\11\63\10\0\1\63\1\271\1\63\2\0"
            + "\2\63\1\271\2\0\1\63\1\167\1\63\1\271\1\0"
            + "\1\167\1\0\3\63\4\0\2\63\1\0\3\63\5\0"
            + "\1\271\1\0\1\271\32\0\1\271\5\0\1\271\5\0"
            + "\1\271\22\0\1\4\6\5\1\0\15\5\1\174\1\5"
            + "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"
            + "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"
            + "\3\5\2\0\1\4\6\5\1\0\14\5\1\357\2\5"
            + "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"
            + "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"
            + "\3\5\2\0\1\4\6\5\1\0\1\5\1\360\15\5"
            + "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"
            + "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"
            + "\3\5\2\0\1\4\6\5\1\0\5\5\1\361\11\5"
            + "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"
            + "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"
            + "\3\5\2\0\1\4\6\5\1\0\4\5\1\362\1\5"
            + "\1\363\10\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\12\5"
            + "\1\75\4\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\1\5"
            + "\1\364\15\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\7\5"
            + "\1\112\4\5\1\365\2\5\10\0\1\4\2\5\2\0"
            + "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"
            + "\1\4\4\0\2\5\1\0\3\5\2\0\1\4\6\5"
            + "\1\0\5\5\1\366\11\5\10\0\1\4\2\5\2\0"
            + "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"
            + "\1\4\4\0\2\5\1\0\3\5\2\0\1\4\6\5"
            + "\1\0\3\5\1\73\13\5\10\0\1\4\2\5\2\0"
            + "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"
            + "\1\4\4\0\2\5\1\0\3\5\2\0\1\4\6\5"
            + "\1\0\3\5\1\367\3\5\1\370\7\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\11\5\1\371\5\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\14\5\1\372\2\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\11\5\1\373\5\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\17\5\10\0\1\4\2\5\2\0"
            + "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"
            + "\1\4\4\0\1\5\1\200\1\0\3\5\2\0\1\4"
            + "\6\5\1\0\7\5\1\374\7\5\10\0\1\4\2\5"
            + "\2\0\3\5\2\0\4\5\1\0\1\5\1\0\1\4"
            + "\1\5\1\4\4\0\2\5\1\0\3\5\2\0\1\4"
            + "\6\5\1\0\10\5\1\375\6\5\10\0\1\4\2\5"
            + "\2\0\3\5\2\0\4\5\1\0\1\5\1\0\1\4"
            + "\1\5\1\4\4\0\2\5\1\0\3\5\2\0\1\4"
            + "\6\5\1\0\10\5\1\376\6\5\10\0\1\4\2\5"
            + "\2\0\3\5\2\0\4\5\1\0\1\5\1\0\1\4"
            + "\1\5\1\4\4\0\2\5\1\0\3\5\2\0\1\4"
            + "\6\5\1\0\3\5\1\377\13\5\10\0\1\4\2\5"
            + "\2\0\3\5\2\0\4\5\1\0\1\5\1\0\1\4"
            + "\1\5\1\4\4\0\2\5\1\0\3\5\2\0\1\4"
            + "\6\5\1\0\11\5\1\u0100\5\5\10\0\1\4\2\5"
            + "\2\0\3\5\2\0\4\5\1\0\1\5\1\0\1\4"
            + "\1\5\1\4\4\0\2\5\1\0\3\5\2\0\1\4"
            + "\6\5\1\0\1\5\1\u0101\15\5\10\0\1\4\2\5"
            + "\2\0\3\5\2\0\4\5\1\0\1\5\1\0\1\4"
            + "\1\5\1\4\4\0\2\5\1\0\3\5\2\0\1\4"
            + "\6\5\1\0\17\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\1\5\1\u0102\1\0\3\5\2\0\1\4\6\5"
            + "\1\0\7\5\1\u0103\7\5\10\0\1\4\2\5\2\0"
            + "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"
            + "\1\4\4\0\2\5\1\0\3\5\2\0\1\4\6\5"
            + "\1\0\6\5\1\116\10\5\10\0\1\4\2\5\2\0"
            + "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"
            + "\1\4\4\0\2\5\1\0\3\5\2\0\3\223\4\126"
            + "\1\223\3\126\6\223\1\126\2\223\1\126\6\223\1\130"
            + "\4\223\1\126\1\223\1\0\2\223\2\126\4\223\2\126"
            + "\1\223\1\126\20\223\3\133\4\37\1\133\3\37\6\133"
            + "\1\37\2\133\1\37\12\133\1\233\1\37\2\133\1\234"
            + "\1\133\2\37\4\133\2\37\1\133\1\37\20\133\1\4"
            + "\6\5\1\0\14\5\1\u0104\2\5\10\0\1\4\2\5"
            + "\2\0\3\5\2\0\4\5\1\0\1\5\1\0\1\4"
            + "\1\5\1\4\4\0\2\5\1\0\3\5\2\0\7\63"
            + "\1\0\12\63\1\u0105\4\63\10\0\3\63\2\0\3\63"
            + "\2\0\1\u0105\3\63\1\0\1\63\1\0\3\63\4\0"
            + "\2\63\1\0\3\63\2\0\7\63\1\0\5\63\1\u0105"
            + "\11\63\10\0\3\63\2\0\3\63\2\0\1\63\1\u0105"
            + "\2\63\1\0\1\63\1\0\3\63\4\0\2\63\1\0"
            + "\3\63\2\0\7\4\1\0\3\4\1\332\13\4\10\0"
            + "\3\4\2\0\3\4\2\0\4\4\1\0\1\4\1\0"
            + "\3\4\4\0\2\4\1\0\3\4\2\0\7\4\1\0"
            + "\2\4\1\u0106\14\4\10\0\3\4\2\0\3\4\2\0"
            + "\4\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"
            + "\3\4\2\0\7\4\1\0\1\4\1\u0106\15\4\10\0"
            + "\3\4\2\0\3\4\2\0\4\4\1\0\1\4\1\0"
            + "\3\4\4\0\2\4\1\0\3\4\2\0\7\4\1\0"
            + "\10\4\1\u0107\6\4\10\0\3\4\2\0\3\4\2\0"
            + "\4\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"
            + "\3\4\2\0\7\4\1\0\1\4\1\332\15\4\10\0"
            + "\3\4\2\0\3\4\2\0\4\4\1\0\1\4\1\0"
            + "\3\4\4\0\2\4\1\0\3\4\2\0\7\4\1\0"
            + "\5\4\1\u0108\11\4\10\0\3\4\2\0\3\4\2\0"
            + "\4\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"
            + "\3\4\2\0\7\4\1\0\15\4\1\u0109\1\4\10\0"
            + "\3\4\2\0\3\4\2\0\4\4\1\0\1\4\1\0"
            + "\3\4\4\0\2\4\1\0\3\4\14\0\1\255\74\0"
            + "\1\u010a\101\0\1\u010b\2\0\1\u010c\77\0\1\u010d\67\0"
            + "\1\u010e\3\0\1\347\103\0\1\u010f\71\0\1\u010c\72\0"
            + "\1\u010e\112\0\1\u0110\104\0\1\u0111\62\0\1\262\52\0"
            + "\1\351\6\0\1\353\1\u0112\4\353\1\u0112\17\353\3\u0112"
            + "\1\353\1\u0112\1\0\2\u0112\1\0\2\353\2\0\3\353"
            + "\1\0\1\u0112\4\353\1\u0112\1\353\1\0\1\u0112\1\353"
            + "\5\u0112\2\353\1\u0112\3\353\34\0\1\u0113\62\0\1\266"
            + "\52\0\1\354\6\0\1\356\1\u0114\4\356\1\u0114\17\356"
            + "\3\u0114\1\356\1\u0114\1\0\2\u0114\1\0\2\356\2\0"
            + "\3\356\1\0\1\u0114\4\356\1\u0114\1\356\1\0\1\u0114"
            + "\1\356\5\u0114\2\356\1\u0114\3\356\2\0\1\4\6\5"
            + "\1\0\4\5\1\u0115\12\5\10\0\1\4\2\5\2\0"
            + "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"
            + "\1\4\4\0\2\5\1\0\3\5\2\0\1\4\6\5"
            + "\1\0\17\5\10\0\1\4\2\5\2\0\1\u0116\2\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\17\5\10\0\1\4\2\5\2\0\3\5\2\0\4\5"
            + "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\200"
            + "\1\5\1\0\3\5\2\0\1\4\6\5\1\0\17\5"
            + "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"
            + "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"
            + "\1\5\1\172\1\5\2\0\1\4\6\5\1\0\11\5"
            + "\1\u0117\5\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\13\5"
            + "\1\206\3\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\7\5"
            + "\1\200\7\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\15\5"
            + "\1\221\1\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\7\5"
            + "\1\373\7\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\7\5"
            + "\1\u0118\7\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\14\5"
            + "\1\u0119\2\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\17\5"
            + "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"
            + "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\u011a"
            + "\1\0\3\5\2\0\1\4\6\5\1\0\10\5\1\312"
            + "\6\5\10\0\1\4\2\5\2\0\3\5\2\0\4\5"
            + "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"
            + "\1\0\3\5\2\0\1\4\6\5\1\0\4\5\1\117"
            + "\12\5\10\0\1\4\2\5\2\0\3\5\2\0\4\5"
            + "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"
            + "\1\0\3\5\2\0\1\4\6\5\1\0\11\5\1\u011b"
            + "\5\5\10\0\1\4\2\5\2\0\3\5\2\0\4\5"
            + "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"
            + "\1\0\3\5\2\0\1\4\6\5\1\0\16\5\1\u011c"
            + "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"
            + "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"
            + "\3\5\2\0\1\4\6\5\1\0\14\5\1\312\2\5"
            + "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"
            + "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"
            + "\3\5\2\0\1\4\6\5\1\0\13\5\1\u011d\3\5"
            + "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"
            + "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\u011e"
            + "\1\0\3\5\2\0\1\4\6\5\1\0\1\u011f\16\5"
            + "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"
            + "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"
            + "\3\5\2\0\1\4\6\5\1\0\10\5\1\u0120\6\5"
            + "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"
            + "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"
            + "\3\5\2\0\1\4\6\5\1\0\3\5\1\u0121\13\5"
            + "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"
            + "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"
            + "\3\5\2\0\1\4\6\5\1\0\1\u0122\16\5\10\0"
            + "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"
            + "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"
            + "\2\0\7\4\1\0\7\4\1\u0106\7\4\10\0\3\4"
            + "\2\0\3\4\2\0\4\4\1\0\1\4\1\0\3\4"
            + "\4\0\2\4\1\0\3\4\2\0\7\4\1\0\12\4"
            + "\1\u0123\4\4\10\0\3\4\2\0\3\4\2\0\4\4"
            + "\1\0\1\4\1\0\3\4\4\0\2\4\1\0\3\4"
            + "\2\0\7\4\1\0\16\4\1\u0124\10\0\3\4\2\0"
            + "\3\4\2\0\4\4\1\0\1\4\1\0\3\4\4\0"
            + "\2\4\1\0\3\4\15\0\1\u010b\75\0\1\u0125\75\0"
            + "\1\u0125\105\0\1\u0126\67\0\1\u010b\102\0\1\u0127\106\0"
            + "\1\u0128\103\0\1\353\76\0\1\356\44\0\1\4\6\5"
            + "\1\0\17\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\1\5\1\73\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\14\5\1\u0129\2\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\10\5\1\276\6\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\10\5\1\u012a\6\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\7\5\1\u012b\7\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\1\5\1\u012c\15\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\14\5\1\177\2\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\1\5\1\u012d\15\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\4\5\1\u012e\12\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\1\5\1\u012f\15\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\3\5\1\u0130\13\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\7\5\1\304\7\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\17\5\10\0\1\4\2\5\2\0\3\5\2\0\4\5"
            + "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"
            + "\1\u0131\1\0\3\5\2\0\1\4\6\5\1\0\1\5"
            + "\1\u0132\15\5\10\0\1\4\2\5\2\0\3\5\2\0"
            + "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"
            + "\2\5\1\0\3\5\2\0\7\4\1\0\1\333\16\4"
            + "\10\0\3\4\2\0\3\4\2\0\4\4\1\0\1\4"
            + "\1\0\3\4\4\0\2\4\1\0\3\4\2\0\7\4"
            + "\1\0\14\4\1\u0106\2\4\10\0\3\4\2\0\3\4"
            + "\2\0\4\4\1\0\1\4\1\0\3\4\4\0\2\4"
            + "\1\0\3\4\21\0\1\u0125\101\0\1\u0133\102\0\1\u0134"
            + "\50\0\1\4\6\5\1\0\5\5\1\174\11\5\10\0"
            + "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"
            + "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"
            + "\2\0\1\4\6\5\1\0\16\5\1\u0135\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\14\5\1\116\2\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\5\5\1\200\11\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\17\5\10\0\1\4\2\5\2\0"
            + "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"
            + "\1\4\4\0\1\5\1\u0136\1\0\3\5\2\0\1\4"
            + "\6\5\1\0\12\5\1\u0137\4\5\10\0\1\4\2\5"
            + "\2\0\3\5\2\0\4\5\1\0\1\5\1\0\1\4"
            + "\1\5\1\4\4\0\2\5\1\0\3\5\2\0\1\4"
            + "\6\5\1\0\7\5\1\u0138\7\5\10\0\1\4\2\5"
            + "\2\0\3\5\2\0\4\5\1\0\1\5\1\0\1\4"
            + "\1\5\1\4\4\0\2\5\1\0\3\5\2\0\1\4"
            + "\6\5\1\0\16\5\1\u0139\10\0\1\4\2\5\2\0"
            + "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"
            + "\1\4\4\0\2\5\1\0\3\5\2\0\1\4\6\5"
            + "\1\0\16\5\1\73\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"
            + "\3\5\1\u0136\13\5\10\0\1\4\2\5\2\0\3\5"
            + "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"
            + "\4\0\2\5\1\0\3\5\12\0\1\u010c\112\0\1\u0125"
            + "\52\0\1\4\6\5\1\0\13\5\1\200\3\5\10\0"
            + "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"
            + "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"
            + "\2\0\1\4\6\5\1\0\7\5\1\73\7\5\10\0"
            + "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"
            + "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"
            + "\2\0\1\4\6\5\1\0\16\5\1\174\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\1\5\1\312\15\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"
            + "\1\4\6\5\1\0\1\5\1\357\15\5\10\0\1\4"
            + "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"
            + "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[18270];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
        "Unkown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0
            = "\3\0\23\1\1\11\2\1\2\11\2\1\1\11\6\1"
            + "\1\11\4\1\1\11\5\1\1\11\42\1\1\0\2\11"
            + "\2\1\1\11\3\1\1\11\12\1\1\0\2\1\2\0"
            + "\1\11\6\0\1\1\1\0\37\1\1\11\7\1\1\11"
            + "\15\1\6\0\1\1\10\0\1\1\1\0\45\1\4\0"
            + "\1\1\6\0\1\1\2\0\34\1\13\0\20\1\1\11"
            + "\3\0\12\1\2\0\5\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[313];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of
     * the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the textposition at the last state to be included in yytext
     */
    private int zzPushbackPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from
     * input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /* user code: */
    /**
     * Constructor. This must be here because JFlex does not generate a
     * no-parameter constructor.
     */
    public PortugolTokenMaker() {
        super();
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     * @see #addToken(int, int, int)
     */
    private void addHyperlinkToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start, end, tokenType, so, true);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos - 1, tokenType);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start, end, tokenType, so);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param array The character array.
     * @param start The starting offset in the array.
     * @param end The ending offset in the array.
     * @param tokenType The token's type.
     * @param startOffset The offset in the document at which this token occurs.
     */
    public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
        super.addToken(array, start, end, tokenType, startOffset);
        zzStartRead = zzMarkedPos;
    }

    /**
     * Returns the text to place at the beginning and end of a line to "comment"
     * it in a this programming language.
     *
     * @return The start and end strings to add to a line to "comment" it out.
     */
    public String[] getLineCommentStartAndEnd() {
        return new String[]{"//", null};
    }

    /**
     * Returns the first token in the linked list of tokens generated from
     * <code>text</code>. This method must be implemented by subclasses so they
     * can correctly implement syntax highlighting.
     *
     * @param text The text from which to get tokens.
     * @param initialTokenType The token type we should start with.
     * @param startOffset The offset into the document at which
     * <code>text</code> starts.
     * @return The first <code>Token</code> in a linked list representing the
     * syntax highlighted text.
     */
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

        resetTokenList();
        this.offsetShift = -text.offset + startOffset;

        // Start off in the proper state.
        int state = Token.NULL;
        switch (initialTokenType) {
            case Token.COMMENT_MULTILINE:
                state = MLC;
                start = text.offset;
                break;
            default:
                state = Token.NULL;
        }

        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return new TokenImpl();
        }

    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>true</code> if EOF was reached, otherwise
     * <code>false</code>.
     * @exception IOException if any I/O-Error occurs.
     */
    private boolean zzRefill() throws java.io.IOException {
        return zzCurrentPos >= s.offset + s.count;
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the
     * old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical
     * state is set to <tt>YY_INITIAL</tt>.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) throws java.io.IOException {
        // 's' has been updated.
        zzBuffer = s.array;
        /*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
         */
        //zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
    }

    /**
     * Creates a new scanner There is also a java.io.InputStream version of this
     * constructor.
     *
     * @param in the java.io.Reader to read input from.
     */
    public PortugolTokenMaker(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner. There is also java.io.Reader version of this
     * constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    public PortugolTokenMaker(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;
        /* index in packed string  */
        int j = 0;
        /* index in unpacked array */
        while (i < 164) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;
        /* indicate end of file */
        zzEndRead = zzStartRead;
        /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch. A value from 0 to
     * yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of yypushback(int) and
     * a match-all fallback rule) this method will only be called with things
     * that "Can't Possibly Happen". If this method is called, something is
     * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done in error
     * fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again. This number must
     * not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of
     * input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException if any I/O-Error occurs
     */
    public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = zzLexicalState;

            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = zzBufferL[zzCurrentPosL++];
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 25: {
                    addToken(Token.PREPROCESSOR);
                }
                case 29:
                    break;
                case 8: {
                    addNullToken();
                    return firstToken;
                }
                case 30:
                    break;
                case 22: {
                    addToken(Token.LITERAL_CHAR);
                }
                case 31:
                    break;
                case 21: {
                    yybegin(YYINITIAL);
                    addToken(start, zzStartRead + 1, Token.COMMENT_MULTILINE);
                }
                case 32:
                    break;
                case 17: {
                    start = zzMarkedPos - 2;
                    yybegin(MLC);
                }
                case 33:
                    break;
                case 10: {
                    addToken(Token.WHITESPACE);
                }
                case 34:
                    break;
                case 24: {
                    addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
                }
                case 35:
                    break;
                case 18: {
                    addToken(Token.ERROR_CHAR);
                    /*addNullToken(); return firstToken;*/
                }
                case 36:
                    break;
                case 23: {
                    addToken(Token.ERROR_STRING_DOUBLE);
                }
                case 37:
                    break;
                case 15: {
                    addToken(Token.LITERAL_NUMBER_FLOAT);
                }
                case 38:
                    break;
                case 5: {
                    addToken(Token.RESERVED_WORD);
                }
                case 39:
                    break;
                case 6: {
                    addToken(Token.SEPARATOR);
                }
                case 40:
                    break;
                case 2: {
                    addToken(Token.IDENTIFIER);
                }
                case 41:
                    break;
                case 13: {
                    addToken(start, zzStartRead - 1, Token.COMMENT_EOL);
                    addNullToken();
                    return firstToken;
                }
                case 42:
                    break;
                case 16: {
                    start = zzMarkedPos - 2;
                    yybegin(EOL_COMMENT);
                }
                case 43:
                    break;
                case 7: {
                    addToken(Token.ERROR_CHAR);
                    addNullToken();
                    return firstToken;
                }
                case 44:
                    break;
                case 9: {
                    addToken(Token.ERROR_STRING_DOUBLE);
                    addNullToken();
                    return firstToken;
                }
                case 45:
                    break;
                case 26: {
                    addToken(Token.DATA_TYPE);
                }
                case 46:
                    break;
                case 1: {
                    addToken(Token.ERROR_IDENTIFIER);
                }
                case 47:
                    break;
                case 19: {
                    addToken(Token.ERROR_CHAR);
                }
                case 48:
                    break;
                case 20: {
                    addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
                }
                case 49:
                    break;
                case 28: {
                    int temp = zzStartRead;
                    addToken(start, zzStartRead - 1, Token.COMMENT_EOL);
                    addHyperlinkToken(temp, zzMarkedPos - 1, Token.COMMENT_EOL);
                    start = zzMarkedPos;
                }
                case 50:
                    break;
                case 27: {
                    int temp = zzStartRead;
                    addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
                    addHyperlinkToken(temp, zzMarkedPos - 1, Token.COMMENT_MULTILINE);
                    start = zzMarkedPos;
                }
                case 51:
                    break;
                case 14: {
                    addToken(Token.ERROR_NUMBER_FORMAT);
                }
                case 52:
                    break;
                case 3: {
                    addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
                }
                case 53:
                    break;
                case 4: {
                    addToken(Token.OPERATOR);
                }
                case 54:
                    break;
                case 11: {
                }
                case 55:
                    break;
                case 12: {
                    addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
                    return firstToken;
                }
                case 56:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        switch (zzLexicalState) {
                            case EOL_COMMENT: {
                                addToken(start, zzStartRead - 1, Token.COMMENT_EOL);
                                addNullToken();
                                return firstToken;
                            }
                            case 314:
                                break;
                            case YYINITIAL: {
                                addNullToken();
                                return firstToken;
                            }
                            case 315:
                                break;
                            case MLC: {
                                addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
                                return firstToken;
                            }
                            case 316:
                                break;
                            default:
                                return null;
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }

}
