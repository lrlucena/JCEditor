/* The following code was generated by JFlex 1.4.1 on 20/12/15 20:25 */
package com.cristian;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenMaker;
import org.fife.ui.rsyntaxtextarea.TokenImpl;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1 on 20/12/15 20:25 from the
 * specification file
 * <tt>/home/cristian/√Årea de Trabalho/PotigolTokenMaker.flex</tt>
 */
public class PotigolTokenMaker extends AbstractJFlexTokenMaker {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int LONG_STRING_2 = 1;
    public static final int LONG_STRING_1 = 1;

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED
            = "\11\0\1\34\1\12\1\0\1\34\1\32\22\0\1\34\1\32\1\11"
            + "\1\33\1\0\2\32\1\10\1\65\1\65\1\67\1\27\1\67\1\27"
            + "\1\24\1\67\1\16\1\64\6\21\2\3\1\72\1\74\1\70\1\66"
            + "\1\71\1\32\1\73\4\23\1\26\1\23\2\2\1\62\1\31\1\2"
            + "\1\15\3\2\1\61\1\2\1\6\2\2\1\7\2\2\1\20\2\2"
            + "\1\65\1\13\1\65\1\67\1\1\1\0\1\40\1\22\1\36\1\52"
            + "\1\25\1\50\1\56\1\51\1\41\1\30\1\2\1\14\1\42\1\44"
            + "\1\47\1\43\1\55\1\4\1\35\1\45\1\5\1\37\1\2\1\17"
            + "\1\2\1\63\1\65\1\32\1\65\1\32\142\0\1\60\1\0\1\46"
            + "\3\0\1\54\1\0\1\53\20\0\1\57\uff05\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0
            = "\2\0\1\1\1\2\1\3\4\2\2\4\1\5\1\2"
            + "\1\3\1\6\1\7\1\6\1\2\1\10\1\11\15\2"
            + "\1\1\1\2\1\12\3\6\1\2\2\0\1\13\1\3"
            + "\1\14\1\13\1\14\3\2\1\4\2\0\3\2\1\13"
            + "\1\3\1\13\1\2\1\7\2\2\1\7\22\2\1\0"
            + "\3\2\1\15\4\2\1\7\2\2\4\0\2\14\1\0"
            + "\6\2\1\15\1\3\4\2\1\15\7\2\1\7\20\2"
            + "\1\0\2\2\1\7\1\2\3\0\1\14\12\2\1\0"
            + "\14\2\1\0\1\2\1\0\10\2\3\0\5\2\2\7"
            + "\1\0\1\2\1\0\6\2\1\0\1\2\1\0\1\15"
            + "\1\2\1\0\2\2\1\0\1\15\5\2\1\0\1\2"
            + "\1\0\1\2\1\0\2\2\1\0\4\2\1\0\1\2"
            + "\1\0\3\2\1\0\6\2\1\15";

    private static int[] zzUnpackAction() {
        int[] result = new int[241];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0
            = "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"
            + "\0\u01e8\0\u0225\0\u0262\0\172\0\u029f\0\u02dc\0\u0319\0\u0356"
            + "\0\172\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501"
            + "\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9"
            + "\0\u0726\0\u0763\0\u07a0\0\172\0\u07dd\0\u081a\0\u0857\0\172"
            + "\0\u0894\0\u08d1\0\u090e\0\u090e\0\u094b\0\u0988\0\u090e\0\u09c5"
            + "\0\u0a02\0\u0a3f\0\172\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70"
            + "\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\267\0\u0ca1\0\u0cde\0\u0d1b"
            + "\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03"
            + "\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb"
            + "\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259\0\267\0\u1296"
            + "\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e"
            + "\0\u14bb\0\u14f8\0\172\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629"
            + "\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811"
            + "\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9"
            + "\0\u1a36\0\172\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4"
            + "\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c"
            + "\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74"
            + "\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c"
            + "\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344"
            + "\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c"
            + "\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714"
            + "\0\u2751\0\u278e\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf\0\u28fc"
            + "\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4"
            + "\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc"
            + "\0\u2d09\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4"
            + "\0\u2ef1\0\172\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f"
            + "\0\u309c\0\u30d9\0\u3116\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247"
            + "\0\u3284\0\u32c1\0\u32fe\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u342f"
            + "\0\u346c\0\u34a9\0\u34e6\0\u3523\0\u3560\0\u359d\0\u35da\0\u3617"
            + "\0\u0ec6";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[241];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0
            = "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"
            + "\1\13\1\14\1\3\1\15\1\4\1\16\2\4\1\5"
            + "\2\4\1\17\1\20\1\4\1\21\1\22\1\4\1\3"
            + "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"
            + "\1\33\1\34\1\35\1\3\1\36\1\37\1\4\1\40"
            + "\2\3\1\4\1\41\1\42\1\3\1\43\2\4\1\5"
            + "\1\44\1\45\1\21\1\45\1\46\1\47\2\50\37\0"
            + "\1\51\10\0\1\52\122\0\7\4\4\0\10\4\1\0"
            + "\2\4\1\0\2\4\3\0\11\4\1\0\4\4\2\0"
            + "\2\4\2\0\4\4\10\0\3\53\1\5\4\53\3\0"
            + "\1\53\2\54\1\5\2\53\1\5\2\53\1\55\2\56"
            + "\1\0\2\57\1\0\1\53\1\0\27\53\1\5\6\0"
            + "\1\53\2\0\7\4\1\12\1\13\2\0\10\4\1\0"
            + "\1\60\1\4\1\0\2\4\3\0\3\4\1\61\5\4"
            + "\1\0\4\4\2\0\2\4\2\0\4\4\11\0\3\4"
            + "\1\10\1\4\1\10\1\4\1\12\1\13\2\0\1\62"
            + "\7\4\1\0\2\4\1\0\2\4\3\0\11\4\1\0"
            + "\4\4\2\0\2\4\2\0\4\4\11\0\7\4\1\12"
            + "\1\13\2\0\10\4\1\0\2\4\1\0\2\4\3\0"
            + "\11\4\1\0\4\4\2\0\2\4\2\0\4\4\11\0"
            + "\3\4\1\10\1\4\1\10\1\4\1\12\1\13\2\0"
            + "\10\4\1\0\2\4\1\0\2\4\3\0\11\4\1\0"
            + "\4\4\2\0\2\4\2\0\4\4\10\0\10\12\1\63"
            + "\1\12\1\0\1\64\61\12\11\13\1\63\1\0\1\65"
            + "\61\13\1\0\7\4\4\0\10\4\1\0\1\66\1\4"
            + "\1\0\2\4\3\0\4\4\1\67\4\4\1\0\1\70"
            + "\3\4\2\0\2\4\2\0\4\4\10\0\3\53\1\71"
            + "\4\53\3\0\1\53\2\54\1\72\2\73\1\72\2\53"
            + "\1\55\2\56\1\0\2\57\1\0\1\53\1\0\27\53"
            + "\1\72\6\0\1\53\4\0\1\55\12\0\1\55\2\0"
            + "\1\55\42\0\1\55\11\0\7\4\4\0\10\4\1\0"
            + "\2\4\1\0\2\4\3\0\1\74\4\4\1\75\1\4"
            + "\1\76\1\4\1\0\4\4\2\0\2\4\2\0\4\4"
            + "\11\0\4\4\1\77\2\4\4\0\10\4\1\0\2\4"
            + "\1\0\2\4\3\0\11\4\1\0\4\4\2\0\2\4"
            + "\2\0\4\4\10\0\12\23\1\0\62\23\34\0\1\24"
            + "\41\0\7\4\4\0\10\4\1\0\1\100\1\4\1\0"
            + "\2\4\3\0\11\4\1\0\1\101\3\4\2\0\2\4"
            + "\2\0\4\4\11\0\7\4\4\0\10\4\1\0\2\4"
            + "\1\0\2\4\3\0\3\4\1\102\5\4\1\0\1\103"
            + "\3\4\2\0\2\4\2\0\4\4\11\0\7\4\4\0"
            + "\10\4\1\0\1\104\1\4\1\0\2\4\3\0\3\4"
            + "\1\105\5\4\1\0\4\4\2\0\2\4\2\0\4\4"
            + "\11\0\3\4\1\106\3\4\4\0\6\4\1\107\1\4"
            + "\1\0\2\4\1\0\2\4\3\0\10\4\1\110\1\0"
            + "\4\4\2\0\2\4\2\0\4\4\11\0\7\4\4\0"
            + "\10\4\1\0\2\4\1\0\2\4\3\0\5\4\1\111"
            + "\1\4\1\112\1\4\1\0\4\4\2\0\2\4\2\0"
            + "\4\4\11\0\4\4\1\113\2\4\4\0\10\4\1\0"
            + "\2\4\1\0\2\4\3\0\3\4\1\114\1\115\4\4"
            + "\1\0\1\116\3\4\2\0\2\4\2\0\4\4\11\0"
            + "\7\4\4\0\10\4\1\0\1\117\1\4\1\0\2\4"
            + "\3\0\3\4\1\120\5\4\1\0\1\121\3\4\2\0"
            + "\2\4\2\0\4\4\11\0\7\4\4\0\10\4\1\0"
            + "\2\4\1\0\2\4\3\0\3\4\1\122\5\4\1\123"
            + "\4\4\2\0\2\4\2\0\4\4\11\0\7\4\4\0"
            + "\10\4\1\0\1\124\1\4\1\0\2\4\3\0\3\4"
            + "\1\125\1\126\4\4\1\0\4\4\2\0\1\4\1\127"
            + "\2\0\4\4\11\0\3\4\1\130\1\75\2\4\4\0"
            + "\10\4\1\0\2\4\1\0\2\4\3\0\11\4\1\0"
            + "\4\4\2\0\2\4\2\0\4\4\11\0\7\4\4\0"
            + "\10\4\1\0\2\4\1\0\2\4\3\0\3\4\1\131"
            + "\1\132\4\4\1\0\1\133\3\4\2\0\2\4\2\0"
            + "\4\4\11\0\7\4\4\0\10\4\1\0\1\134\1\4"
            + "\1\0\2\4\3\0\4\4\1\135\4\4\1\0\4\4"
            + "\2\0\2\4\2\0\4\4\11\0\7\4\4\0\10\4"
            + "\1\0\1\136\1\4\1\0\2\4\3\0\11\4\1\0"
            + "\4\4\2\0\2\4\2\0\4\4\24\0\1\137\61\0"
            + "\7\4\4\0\10\4\1\0\2\4\1\0\2\4\3\0"
            + "\11\4\1\0\4\4\2\0\2\4\2\0\1\4\1\127"
            + "\2\4\76\0\1\21\2\0\1\21\71\0\1\21\74\0"
            + "\1\21\3\0\1\21\27\0\1\140\107\0\1\141\34\0"
            + "\10\53\3\0\11\53\1\0\2\53\1\0\2\53\1\0"
            + "\1\53\1\0\30\53\6\0\1\53\4\0\1\55\12\0"
            + "\1\55\2\0\1\55\3\0\2\142\1\0\2\143\32\0"
            + "\1\55\10\0\3\53\1\144\4\53\3\0\3\53\1\144"
            + "\2\53\1\144\2\53\1\0\2\53\1\145\2\53\1\0"
            + "\1\53\1\0\27\53\1\144\6\0\1\53\2\0\7\4"
            + "\4\0\10\4\1\0\2\4\1\0\2\4\3\0\3\4"
            + "\1\146\1\4\1\147\3\4\1\0\4\4\2\0\2\4"
            + "\2\0\4\4\11\0\7\4\4\0\10\4\1\0\2\4"
            + "\1\0\2\4\3\0\4\4\1\150\4\4\1\0\4\4"
            + "\2\0\2\4\2\0\4\4\11\0\7\4\4\0\10\4"
            + "\1\0\2\4\1\0\2\4\3\0\10\4\1\151\1\0"
            + "\4\4\2\0\2\4\2\0\4\4\10\0\12\12\1\0"
            + "\62\12\12\13\1\0\62\13\1\0\7\4\4\0\10\4"
            + "\1\0\2\4\1\0\2\4\3\0\4\4\1\152\4\4"
            + "\1\0\4\4\2\0\2\4\2\0\4\4\11\0\7\4"
            + "\4\0\10\4\1\0\2\4\1\0\2\4\3\0\1\153"
            + "\10\4\1\0\4\4\2\0\2\4\2\0\4\4\11\0"
            + "\7\4\4\0\10\4\1\0\2\4\1\0\2\4\3\0"
            + "\11\4\1\0\4\4\2\0\1\4\1\154\2\0\4\4"
            + "\10\0\3\53\1\71\4\53\3\0\3\53\1\71\2\53"
            + "\1\71\2\53\1\55\2\56\1\0\2\57\1\0\1\53"
            + "\1\0\27\53\1\71\6\0\1\53\1\0\3\53\1\71"
            + "\4\53\3\0\1\53\2\54\1\72\2\53\1\72\2\53"
            + "\1\55\2\56\1\0\2\57\1\0\1\53\1\0\27\53"
            + "\1\72\6\0\1\53\1\0\3\53\1\155\4\53\3\0"
            + "\3\53\1\155\2\53\3\155\1\0\2\155\1\0\2\53"
            + "\1\0\1\53\1\0\1\53\1\155\1\53\1\155\7\53"
            + "\1\155\1\53\1\155\11\53\1\155\6\0\1\53\2\0"
            + "\7\4\4\0\10\4\1\0\2\4\1\0\2\4\3\0"
            + "\1\4\1\156\7\4\1\0\4\4\2\0\2\4\2\0"
            + "\4\4\11\0\7\4\4\0\10\4\1\0\2\4\1\0"
            + "\2\4\3\0\10\4\1\34\1\0\4\4\2\0\1\157"
            + "\1\4\2\0\4\4\11\0\7\4\4\0\10\4\1\0"
            + "\2\4\1\0\2\4\3\0\7\4\1\160\1\4\1\0"
            + "\4\4\2\0\2\4\2\0\4\4\11\0\7\4\4\0"
            + "\1\161\7\4\1\0\2\4\1\0\2\4\3\0\7\4"
            + "\1\162\1\4\1\0\4\4\2\0\2\4\2\0\4\4"
            + "\11\0\7\4\4\0\10\4\1\0\2\4\1\0\2\4"
            + "\3\0\5\4\1\163\3\4\1\0\4\4\2\0\2\4"
            + "\2\0\4\4\11\0\4\4\1\164\2\4\4\0\6\4"
            + "\1\165\1\4\1\0\2\4\1\0\2\4\3\0\1\122"
            + "\10\4\1\0\4\4\2\0\2\4\2\0\4\4\11\0"
            + "\7\4\4\0\10\4\1\0\2\4\1\0\2\4\3\0"
            + "\1\127\6\4\1\166\1\4\1\0\4\4\2\0\2\4"
            + "\2\0\4\4\11\0\3\4\1\167\3\4\4\0\10\4"
            + "\1\0\2\4\1\0\2\4\3\0\11\4\1\0\4\4"
            + "\2\0\2\4\2\0\4\4\11\0\3\4\1\75\3\4"
            + "\4\0\10\4\1\0\2\4\1\0\2\4\3\0\11\4"
            + "\1\0\4\4\2\0\2\4\2\0\4\4\11\0\3\4"
            + "\1\170\3\4\4\0\10\4\1\0\2\4\1\0\2\4"
            + "\3\0\1\4\1\171\7\4\1\0\4\4\2\0\2\4"
            + "\2\0\4\4\11\0\7\4\4\0\10\4\1\0\2\4"
            + "\1\0\2\4\3\0\1\127\10\4\1\0\4\4\2\0"
            + "\2\4\2\0\4\4\11\0\7\4\4\0\10\4\1\0"
            + "\1\75\1\4\1\0\2\4\3\0\11\4\1\0\4\4"
            + "\1\172\1\0\2\4\2\0\4\4\11\0\4\4\1\113"
            + "\2\4\4\0\10\4\1\0\2\4\1\0\2\4\3\0"
            + "\6\4\1\173\2\4\1\0\4\4\2\0\2\4\2\0"
            + "\4\4\11\0\7\4\4\0\10\4\1\0\2\4\1\0"
            + "\1\174\1\4\3\0\1\175\1\4\1\176\5\4\1\177"
            + "\1\0\4\4\2\0\2\4\2\0\4\4\11\0\7\4"
            + "\4\0\10\4\1\0\2\4\1\0\2\4\3\0\10\4"
            + "\1\200\1\0\4\4\2\0\2\4\2\0\4\4\11\0"
            + "\7\4\4\0\10\4\1\0\2\4\1\0\2\4\3\0"
            + "\4\4\1\201\1\4\1\202\2\4\1\0\4\4\2\0"
            + "\2\4\2\0\4\4\11\0\7\4\4\0\10\4\1\0"
            + "\2\4\1\0\2\4\3\0\7\4\1\201\1\4\1\0"
            + "\4\4\2\0\2\4\2\0\4\4\11\0\7\4\4\0"
            + "\10\4\1\0\2\4\1\0\2\4\3\0\11\4\1\0"
            + "\3\4\1\75\2\0\2\4\2\0\4\4\11\0\7\4"
            + "\4\0\10\4\1\0\2\4\1\0\2\4\3\0\11\4"
            + "\1\0\4\4\2\0\1\4\1\203\2\0\4\4\11\0"
            + "\3\4\1\204\3\4\4\0\10\4\1\0\2\4\1\0"
            + "\2\4\3\0\1\205\10\4\1\0\4\4\2\0\2\4"
            + "\2\0\4\4\11\0\7\4\4\0\10\4\1\0\2\4"
            + "\1\0\2\4\3\0\1\206\10\4\1\0\4\4\2\0"
            + "\2\4\2\0\4\4\11\0\7\4\4\0\10\4\1\0"
            + "\2\4\1\0\2\4\3\0\11\4\1\0\1\75\3\4"
            + "\2\0\2\4\2\0\4\4\57\0\1\172\26\0\7\4"
            + "\4\0\3\4\1\207\4\4\1\0\2\4\1\0\2\4"
            + "\3\0\11\4\1\0\4\4\2\0\2\4\2\0\4\4"
            + "\11\0\7\4\4\0\10\4\1\0\2\4\1\0\2\4"
            + "\3\0\5\4\1\210\3\4\1\0\4\4\2\0\2\4"
            + "\2\0\4\4\11\0\7\4\4\0\10\4\1\0\2\4"
            + "\1\0\2\4\3\0\6\4\1\122\2\4\1\0\4\4"
            + "\2\0\2\4\2\0\4\4\11\0\7\4\4\0\10\4"
            + "\1\0\2\4\1\0\2\4\3\0\11\4\1\0\3\4"
            + "\1\211\2\0\2\4\2\0\4\4\11\0\7\4\4\0"
            + "\1\212\7\4\1\0\2\4\1\0\2\4\3\0\1\4"
            + "\1\204\7\4\1\0\4\4\1\0\1\213\2\4\2\0"
            + "\4\4\11\0\7\4\4\0\10\4\1\0\2\4\1\0"
            + "\2\4\3\0\5\4\1\75\3\4\1\0\4\4\2\0"
            + "\2\4\2\0\4\4\11\0\3\4\1\214\3\4\4\0"
            + "\10\4\1\0\2\4\1\0\2\4\3\0\11\4\1\0"
            + "\4\4\2\0\2\4\2\0\4\4\11\0\7\4\4\0"
            + "\10\4\1\0\2\4\1\0\2\4\3\0\1\215\10\4"
            + "\1\0\4\4\2\0\2\4\2\0\4\4\11\0\7\4"
            + "\4\0\10\4\1\0\2\4\1\0\2\4\3\0\2\4"
            + "\1\216\6\4\1\0\4\4\2\0\2\4\2\0\4\4"
            + "\11\0\3\4\1\217\3\4\4\0\10\4\1\0\2\4"
            + "\1\0\2\4\3\0\11\4\1\0\4\4\2\0\2\4"
            + "\2\0\4\4\55\0\1\220\33\0\1\221\104\0\1\222"
            + "\63\0\1\223\12\0\1\223\2\0\1\223\5\0\1\145"
            + "\34\0\1\223\10\0\3\53\1\144\4\53\3\0\3\53"
            + "\1\144\2\53\1\144\2\53\1\0\2\53\1\0\2\57"
            + "\1\0\1\53\1\0\27\53\1\144\6\0\1\53\4\0"
            + "\1\223\12\0\1\223\2\0\1\223\42\0\1\223\11\0"
            + "\7\4\4\0\1\127\7\4\1\0\2\4\1\0\2\4"
            + "\3\0\11\4\1\0\4\4\2\0\2\4\2\0\4\4"
            + "\11\0\7\4\4\0\10\4\1\0\2\4\1\0\2\4"
            + "\3\0\11\4\1\0\1\224\3\4\2\0\2\4\2\0"
            + "\4\4\11\0\7\4\4\0\10\4\1\0\2\4\1\0"
            + "\2\4\3\0\11\4\1\0\4\4\2\0\2\4\2\0"
            + "\2\4\1\127\1\4\11\0\7\4\4\0\10\4\1\0"
            + "\2\4\1\0\2\4\3\0\4\4\1\225\4\4\1\0"
            + "\4\4\2\0\2\4\2\0\4\4\11\0\7\4\4\0"
            + "\10\4\1\0\2\4\1\0\2\4\3\0\3\4\1\226"
            + "\5\4\1\0\4\4\2\0\2\4\2\0\4\4\11\0"
            + "\7\4\4\0\10\4\1\0\2\4\1\0\2\4\3\0"
            + "\10\4\1\163\1\0\4\4\2\0\2\4\2\0\4\4"
            + "\11\0\7\4\4\0\10\4\1\0\2\4\1\0\2\4"
            + "\3\0\11\4\1\0\4\4\2\0\2\4\2\0\3\4"
            + "\1\227\10\0\3\53\1\155\4\53\3\0\1\53\2\54"
            + "\1\155\2\53\3\155\1\0\2\155\1\0\2\53\1\0"
            + "\1\53\1\0\1\53\1\155\1\53\1\155\7\53\1\155"
            + "\1\53\1\155\11\53\1\155\6\0\1\53\2\0\3\4"
            + "\1\230\3\4\4\0\10\4\1\0\2\4\1\0\2\4"
            + "\3\0\11\4\1\0\1\231\3\4\2\0\2\4\2\0"
            + "\4\4\11\0\4\4\1\232\2\4\4\0\10\4\1\0"
            + "\2\4\1\0\2\4\3\0\11\4\1\0\4\4\2\0"
            + "\2\4\2\0\4\4\11\0\7\4\4\0\10\4\1\0"
            + "\2\4\1\0\2\4\3\0\10\4\1\233\1\0\4\4"
            + "\2\0\2\4\2\0\4\4\11\0\7\4\4\0\10\4"
            + "\1\0\1\234\1\4\1\0\2\4\3\0\11\4\1\0"
            + "\4\4\2\0\2\4\2\0\4\4\11\0\7\4\4\0"
            + "\10\4\1\0\2\4\1\0\2\4\3\0\3\4\1\235"
            + "\5\4\1\236\4\4\2\0\2\4\2\0\4\4\11\0"
            + "\7\4\4\0\10\4\1\0\2\4\1\0\2\4\3\0"
            + "\3\4\1\127\5\4\1\0\4\4\2\0\2\4\2\0"
            + "\4\4\11\0\7\4\4\0\10\4\1\0\2\4\1\0"
            + "\2\4\3\0\11\4\1\0\3\4\1\163\2\0\2\4"
            + "\2\0\4\4\11\0\7\4\4\0\10\4\1\0\1\237"
            + "\1\4\1\0\2\4\3\0\11\4\1\0\4\4\2\0"
            + "\2\4\2\0\4\4\11\0\7\4\4\0\10\4\1\0"
            + "\2\4\1\0\2\4\3\0\10\4\1\240\1\0\4\4"
            + "\2\0\2\4\2\0\4\4\11\0\7\4\4\0\10\4"
            + "\1\0\2\4\1\0\2\4\3\0\11\4\1\0\3\4"
            + "\1\241\2\0\2\4\2\0\4\4\11\0\7\4\4\0"
            + "\10\4\1\0\1\242\1\4\1\0\2\4\3\0\11\4"
            + "\1\0\4\4\2\0\2\4\2\0\4\4\11\0\7\4"
            + "\4\0\10\4\1\0\2\4\1\0\2\4\3\0\1\243"
            + "\1\244\6\4\1\245\1\0\4\4\2\0\2\4\2\0"
            + "\4\4\11\0\3\4\1\246\3\4\4\0\10\4\1\0"
            + "\2\4\1\0\2\4\3\0\11\4\1\0\4\4\2\0"
            + "\2\4\2\0\4\4\11\0\7\4\4\0\10\4\1\0"
            + "\1\160\1\4\1\0\2\4\3\0\11\4\1\0\4\4"
            + "\2\0\2\4\2\0\4\4\11\0\7\4\4\0\10\4"
            + "\1\0\2\4\1\0\2\4\3\0\4\4\1\247\4\4"
            + "\1\0\4\4\2\0\2\4\2\0\4\4\11\0\7\4"
            + "\4\0\10\4\1\0\1\250\1\4\1\0\2\4\3\0"
            + "\11\4\1\0\4\4\2\0\2\4\2\0\4\4\11\0"
            + "\7\4\4\0\10\4\1\0\1\251\1\4\1\0\2\4"
            + "\3\0\11\4\1\0\4\4\2\0\2\4\2\0\4\4"
            + "\11\0\7\4\4\0\10\4\1\0\2\4\1\0\2\4"
            + "\3\0\3\4\1\252\5\4\1\0\4\4\2\0\2\4"
            + "\1\0\1\253\4\4\11\0\4\4\1\254\2\4\4\0"
            + "\10\4\1\0\2\4\1\0\2\4\3\0\11\4\1\0"
            + "\4\4\2\0\2\4\1\255\1\0\4\4\11\0\7\4"
            + "\4\0\10\4\1\0\1\256\1\4\1\0\2\4\3\0"
            + "\11\4\1\0\4\4\2\0\2\4\2\0\4\4\11\0"
            + "\4\4\1\257\2\4\4\0\10\4\1\0\2\4\1\0"
            + "\2\4\3\0\11\4\1\0\4\4\2\0\2\4\2\0"
            + "\4\4\11\0\7\4\4\0\10\4\1\0\2\4\1\0"
            + "\2\4\3\0\3\4\1\75\5\4\1\0\4\4\2\0"
            + "\2\4\2\0\4\4\11\0\7\4\4\0\10\4\1\0"
            + "\2\4\1\0\2\4\3\0\1\122\10\4\1\0\4\4"
            + "\2\0\2\4\2\0\4\4\11\0\7\4\4\0\10\4"
            + "\1\0\2\4\1\0\2\4\3\0\4\4\1\260\4\4"
            + "\1\0\4\4\2\0\2\4\2\0\4\4\11\0\7\4"
            + "\4\0\10\4\1\0\2\4\1\0\2\4\3\0\10\4"
            + "\1\261\1\0\4\4\2\0\2\4\2\0\4\4\11\0"
            + "\7\4\4\0\10\4\1\0\2\4\1\0\2\4\3\0"
            + "\3\4\1\262\5\4\1\0\4\4\2\0\2\4\2\0"
            + "\4\4\11\0\7\4\4\0\10\4\1\0\1\263\1\4"
            + "\1\0\2\4\3\0\11\4\1\0\4\4\2\0\2\4"
            + "\2\0\4\4\11\0\7\4\4\0\10\4\1\0\2\4"
            + "\1\0\2\4\3\0\1\261\10\4\1\0\4\4\2\0"
            + "\2\4\2\0\4\4\50\0\1\172\35\0\7\4\4\0"
            + "\10\4\1\0\2\4\1\0\2\4\3\0\5\4\1\264"
            + "\3\4\1\0\4\4\2\0\2\4\2\0\4\4\11\0"
            + "\7\4\4\0\10\4\1\0\2\4\1\0\2\4\3\0"
            + "\1\4\1\265\7\4\1\0\4\4\2\0\2\4\2\0"
            + "\4\4\11\0\7\4\4\0\10\4\1\0\2\4\1\0"
            + "\2\4\3\0\4\4\1\164\4\4\1\0\4\4\2\0"
            + "\2\4\2\0\4\4\11\0\7\4\4\0\10\4\1\0"
            + "\1\75\1\4\1\0\2\4\3\0\11\4\1\0\4\4"
            + "\2\0\2\4\2\0\4\4\51\0\1\266\105\0\1\267"
            + "\57\0\1\270\42\0\1\223\12\0\1\223\2\0\1\223"
            + "\6\0\2\143\32\0\1\223\11\0\7\4\4\0\10\4"
            + "\1\0\2\4\1\0\2\4\3\0\2\4\1\163\6\4"
            + "\1\0\4\4\2\0\2\4\2\0\4\4\11\0\7\4"
            + "\4\0\10\4\1\0\2\4\1\0\2\4\3\0\5\4"
            + "\1\261\3\4\1\0\4\4\2\0\2\4\2\0\4\4"
            + "\11\0\1\271\6\4\4\0\10\4\1\0\2\4\1\0"
            + "\2\4\3\0\11\4\1\0\4\4\2\0\2\4\2\0"
            + "\4\4\11\0\7\4\4\0\2\4\1\127\5\4\1\0"
            + "\2\4\1\0\2\4\3\0\11\4\1\0\4\4\2\0"
            + "\2\4\2\0\4\4\11\0\7\4\4\0\10\4\1\0"
            + "\1\272\1\4\1\0\2\4\3\0\11\4\1\0\4\4"
            + "\2\0\2\4\2\0\4\4\11\0\7\4\4\0\1\273"
            + "\7\4\1\0\2\4\1\0\2\4\3\0\11\4\1\0"
            + "\4\4\2\0\2\4\2\0\4\4\11\0\7\4\4\0"
            + "\10\4\1\0\2\4\1\0\2\4\3\0\3\4\1\274"
            + "\5\4\1\0\4\4\2\0\2\4\2\0\4\4\11\0"
            + "\7\4\4\0\10\4\1\0\1\127\1\4\1\0\2\4"
            + "\3\0\11\4\1\0\4\4\2\0\2\4\2\0\4\4"
            + "\11\0\7\4\4\0\10\4\1\0\2\4\1\0\2\4"
            + "\3\0\1\4\1\275\7\4\1\0\4\4\2\0\2\4"
            + "\2\0\4\4\11\0\7\4\4\0\10\4\1\0\2\4"
            + "\1\0\2\4\3\0\11\4\1\0\1\276\3\4\2\0"
            + "\2\4\2\0\4\4\57\0\1\277\26\0\7\4\4\0"
            + "\10\4\1\0\2\4\1\0\2\4\3\0\1\4\1\163"
            + "\7\4\1\0\4\4\1\0\1\300\2\4\2\0\4\4"
            + "\11\0\7\4\4\0\10\4\1\0\1\301\1\4\1\0"
            + "\2\4\3\0\11\4\1\0\4\4\1\302\1\0\2\4"
            + "\2\0\4\4\11\0\7\4\4\0\10\4\1\0\2\4"
            + "\1\0\2\4\3\0\3\4\1\303\5\4\1\0\4\4"
            + "\2\0\2\4\2\0\4\4\11\0\7\4\4\0\10\4"
            + "\1\0\2\4\1\0\2\4\3\0\11\4\1\0\3\4"
            + "\1\304\2\0\2\4\2\0\4\4\11\0\7\4\4\0"
            + "\10\4\1\0\1\305\1\4\1\0\2\4\3\0\11\4"
            + "\1\0\4\4\2\0\2\4\2\0\4\4\11\0\7\4"
            + "\4\0\10\4\1\0\2\4\1\0\2\4\3\0\11\4"
            + "\1\0\1\107\3\4\2\0\2\4\2\0\4\4\11\0"
            + "\7\4\4\0\10\4\1\0\2\4\1\0\2\4\3\0"
            + "\11\4\1\0\4\4\2\0\1\4\1\127\2\0\4\4"
            + "\11\0\7\4\4\0\10\4\1\0\2\4\1\0\2\4"
            + "\3\0\4\4\1\306\4\4\1\0\4\4\2\0\2\4"
            + "\2\0\4\4\11\0\3\4\1\163\3\4\4\0\10\4"
            + "\1\0\2\4\1\0\2\4\3\0\11\4\1\0\4\4"
            + "\2\0\2\4\2\0\4\4\11\0\3\4\1\153\3\4"
            + "\4\0\10\4\1\0\2\4\1\0\2\4\3\0\11\4"
            + "\1\0\4\4\2\0\2\4\2\0\4\4\11\0\7\4"
            + "\4\0\10\4\1\0\2\4\1\0\2\4\3\0\4\4"
            + "\1\307\4\4\1\0\4\4\2\0\2\4\2\0\4\4"
            + "\11\0\7\4\4\0\10\4\1\0\2\4\1\0\2\4"
            + "\3\0\2\4\1\310\6\4\1\0\4\4\2\0\2\4"
            + "\2\0\4\4\47\0\1\311\36\0\7\4\4\0\10\4"
            + "\1\0\2\4\1\0\2\4\3\0\1\312\10\4\1\0"
            + "\4\4\2\0\2\4\2\0\4\4\45\0\1\313\40\0"
            + "\7\4\4\0\10\4\1\0\2\4\1\0\2\4\3\0"
            + "\4\4\1\233\4\4\1\0\4\4\2\0\2\4\2\0"
            + "\4\4\11\0\7\4\4\0\10\4\1\0\1\314\1\4"
            + "\1\0\2\4\3\0\11\4\1\0\4\4\2\0\2\4"
            + "\2\0\4\4\11\0\7\4\4\0\10\4\1\0\2\4"
            + "\1\0\2\4\3\0\1\4\1\315\7\4\1\0\4\4"
            + "\1\0\1\316\2\4\2\0\4\4\11\0\7\4\4\0"
            + "\10\4\1\0\2\4\1\0\2\4\3\0\11\4\1\0"
            + "\1\127\3\4\2\0\2\4\2\0\4\4\11\0\7\4"
            + "\4\0\10\4\1\0\2\4\1\0\2\4\3\0\7\4"
            + "\1\317\1\4\1\0\4\4\2\0\2\4\2\0\4\4"
            + "\11\0\7\4\4\0\10\4\1\0\2\4\1\0\2\4"
            + "\3\0\7\4\1\233\1\4\1\0\4\4\2\0\2\4"
            + "\2\0\4\4\11\0\7\4\4\0\10\4\1\0\2\4"
            + "\1\0\2\4\3\0\3\4\1\207\5\4\1\0\4\4"
            + "\2\0\2\4\2\0\4\4\11\0\7\4\4\0\10\4"
            + "\1\0\2\4\1\0\2\4\3\0\3\4\1\320\5\4"
            + "\1\0\4\4\2\0\2\4\2\0\4\4\52\0\1\270"
            + "\72\0\1\321\103\0\1\322\26\0\7\4\4\0\10\4"
            + "\1\0\2\4\1\0\2\4\3\0\4\4\1\323\2\4"
            + "\1\324\1\325\1\0\4\4\2\0\2\4\2\0\4\4"
            + "\11\0\7\4\4\0\10\4\1\0\2\4\1\0\2\4"
            + "\3\0\2\4\1\204\6\4\1\0\4\4\2\0\2\4"
            + "\2\0\4\4\11\0\7\4\4\0\10\4\1\0\2\4"
            + "\1\0\2\4\3\0\11\4\1\0\2\4\1\204\1\4"
            + "\2\0\2\4\2\0\4\4\11\0\7\4\4\0\10\4"
            + "\1\0\2\4\1\0\2\4\3\0\7\4\1\326\1\4"
            + "\1\0\4\4\2\0\2\4\2\0\4\4\11\0\7\4"
            + "\4\0\10\4\1\0\2\4\1\0\2\4\3\0\4\4"
            + "\1\327\4\4\1\0\4\4\2\0\2\4\2\0\4\4"
            + "\11\0\7\4\4\0\10\4\1\0\2\4\1\0\2\4"
            + "\3\0\1\217\10\4\1\0\4\4\2\0\2\4\2\0"
            + "\4\4\45\0\1\330\77\0\1\322\35\0\7\4\4\0"
            + "\10\4\1\0\2\4\1\0\2\4\3\0\5\4\1\127"
            + "\3\4\1\0\4\4\2\0\2\4\2\0\4\4\52\0"
            + "\1\322\33\0\7\4\4\0\10\4\1\0\2\4\1\0"
            + "\2\4\3\0\11\4\1\0\3\4\1\177\2\0\2\4"
            + "\2\0\4\4\11\0\7\4\4\0\10\4\1\0\2\4"
            + "\1\0\2\4\3\0\11\4\1\0\1\331\3\4\2\0"
            + "\2\4\2\0\4\4\11\0\7\4\4\0\10\4\1\0"
            + "\2\4\1\0\2\4\3\0\7\4\1\127\1\4\1\0"
            + "\4\4\2\0\2\4\2\0\4\4\11\0\7\4\4\0"
            + "\10\4\1\0\2\4\1\0\2\4\3\0\5\4\1\204"
            + "\3\4\1\0\4\4\2\0\2\4\2\0\4\4\11\0"
            + "\3\4\1\261\3\4\4\0\10\4\1\0\2\4\1\0"
            + "\2\4\3\0\11\4\1\0\4\4\2\0\2\4\2\0"
            + "\4\4\11\0\7\4\4\0\10\4\1\0\1\146\1\4"
            + "\1\0\2\4\3\0\11\4\1\0\4\4\2\0\2\4"
            + "\2\0\4\4\35\0\1\332\50\0\7\4\4\0\10\4"
            + "\1\0\2\4\1\0\2\4\3\0\1\4\1\333\7\4"
            + "\1\0\4\4\2\0\2\4\2\0\4\4\46\0\1\334"
            + "\37\0\1\335\6\4\4\0\10\4\1\0\2\4\1\0"
            + "\2\4\3\0\11\4\1\0\4\4\2\0\2\4\2\0"
            + "\4\4\11\0\7\4\4\0\10\4\1\0\2\4\1\0"
            + "\2\4\3\0\3\4\1\261\5\4\1\0\4\4\2\0"
            + "\2\4\2\0\4\4\56\0\1\270\27\0\7\4\4\0"
            + "\10\4\1\0\2\4\1\0\2\4\3\0\11\4\1\0"
            + "\2\4\1\261\1\4\2\0\2\4\2\0\4\4\11\0"
            + "\3\4\1\336\3\4\4\0\10\4\1\0\2\4\1\0"
            + "\2\4\3\0\11\4\1\0\4\4\2\0\2\4\2\0"
            + "\4\4\62\0\1\337\23\0\7\4\4\0\10\4\1\0"
            + "\2\4\1\0\2\4\3\0\7\4\1\340\1\4\1\0"
            + "\4\4\2\0\2\4\2\0\4\4\11\0\4\4\1\341"
            + "\2\4\4\0\10\4\1\0\2\4\1\0\2\4\3\0"
            + "\11\4\1\0\4\4\2\0\2\4\2\0\4\4\11\0"
            + "\7\4\4\0\10\4\1\0\1\124\1\4\1\0\2\4"
            + "\3\0\11\4\1\0\4\4\2\0\2\4\2\0\4\4"
            + "\11\0\7\4\4\0\10\4\1\0\2\4\1\0\2\4"
            + "\3\0\10\4\1\122\1\0\4\4\2\0\2\4\2\0"
            + "\4\4\11\0\7\4\4\0\10\4\1\0\2\4\1\0"
            + "\2\4\3\0\11\4\1\0\1\263\3\4\2\0\2\4"
            + "\2\0\4\4\35\0\1\172\50\0\7\4\4\0\10\4"
            + "\1\0\2\4\1\0\2\4\3\0\7\4\1\342\1\4"
            + "\1\0\4\4\2\0\2\4\2\0\4\4\24\0\1\322"
            + "\61\0\4\4\1\343\2\4\4\0\10\4\1\0\2\4"
            + "\1\0\2\4\3\0\11\4\1\0\4\4\2\0\2\4"
            + "\2\0\4\4\15\0\1\344\70\0\7\4\4\0\10\4"
            + "\1\0\1\345\1\4\1\0\2\4\3\0\11\4\1\0"
            + "\4\4\2\0\2\4\2\0\4\4\11\0\7\4\4\0"
            + "\10\4\1\0\2\4\1\0\2\4\3\0\10\4\1\257"
            + "\1\0\4\4\2\0\2\4\2\0\4\4\35\0\1\346"
            + "\50\0\7\4\4\0\10\4\1\0\2\4\1\0\2\4"
            + "\3\0\10\4\1\347\1\0\4\4\2\0\2\4\2\0"
            + "\4\4\11\0\7\4\4\0\10\4\1\0\2\4\1\0"
            + "\2\4\3\0\5\4\1\350\3\4\1\0\4\4\2\0"
            + "\2\4\2\0\4\4\11\0\7\4\4\0\10\4\1\0"
            + "\2\4\1\0\2\4\3\0\11\4\1\0\3\4\1\233"
            + "\2\0\2\4\2\0\4\4\11\0\7\4\4\0\1\261"
            + "\7\4\1\0\2\4\1\0\2\4\3\0\11\4\1\0"
            + "\4\4\2\0\2\4\2\0\4\4\24\0\1\270\61\0"
            + "\7\4\4\0\10\4\1\0\2\4\1\0\2\4\3\0"
            + "\7\4\1\351\1\4\1\0\4\4\2\0\2\4\2\0"
            + "\4\4\51\0\1\352\34\0\7\4\4\0\10\4\1\0"
            + "\1\353\1\4\1\0\2\4\3\0\11\4\1\0\4\4"
            + "\2\0\2\4\2\0\4\4\11\0\7\4\4\0\10\4"
            + "\1\0\1\307\1\4\1\0\2\4\3\0\11\4\1\0"
            + "\4\4\2\0\2\4\2\0\4\4\11\0\7\4\4\0"
            + "\10\4\1\0\2\4\1\0\2\4\3\0\11\4\1\0"
            + "\4\4\2\0\1\354\1\4\2\0\4\4\14\0\1\270"
            + "\71\0\7\4\4\0\10\4\1\0\2\4\1\0\2\4"
            + "\3\0\4\4\1\355\4\4\1\0\4\4\2\0\2\4"
            + "\2\0\4\4\11\0\4\4\1\356\2\4\4\0\10\4"
            + "\1\0\2\4\1\0\2\4\3\0\11\4\1\0\4\4"
            + "\2\0\2\4\2\0\4\4\11\0\3\4\1\357\3\4"
            + "\4\0\10\4\1\0\2\4\1\0\2\4\3\0\11\4"
            + "\1\0\4\4\2\0\2\4\2\0\4\4\11\0\7\4"
            + "\4\0\10\4\1\0\2\4\1\0\2\4\3\0\3\4"
            + "\1\360\5\4\1\0\4\4\2\0\2\4\2\0\4\4"
            + "\11\0\7\4\4\0\10\4\1\0\2\4\1\0\2\4"
            + "\3\0\11\4\1\0\1\361\3\4\2\0\2\4\2\0"
            + "\4\4\11\0\7\4\4\0\10\4\1\0\2\4\1\0"
            + "\2\4\3\0\7\4\1\207\1\4\1\0\4\4\2\0"
            + "\2\4\2\0\4\4\10\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[13908];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
        "Unkown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0
            = "\2\0\1\11\10\1\1\11\4\1\1\11\22\1\1\11"
            + "\3\1\1\11\2\0\10\1\1\11\2\0\35\1\1\0"
            + "\13\1\4\0\1\11\1\1\1\0\24\1\1\11\20\1"
            + "\1\0\4\1\3\0\13\1\1\0\14\1\1\0\1\1"
            + "\1\0\10\1\3\0\7\1\1\0\1\1\1\0\6\1"
            + "\1\0\1\1\1\0\2\1\1\0\2\1\1\0\1\11"
            + "\5\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"
            + "\4\1\1\0\1\1\1\0\3\1\1\0\7\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[241];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of
     * the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the textposition at the last state to be included in yytext
     */
    private int zzPushbackPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from
     * input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /* user code: */
    /**
     * Constructor. This must be here because JFlex does not generate a
     * no-parameter constructor.
     */
    public PotigolTokenMaker() {
        super();
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos - 1, tokenType);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start, end, tokenType, so);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param array The character array.
     * @param start The starting offset in the array.
     * @param end The ending offset in the array.
     * @param tokenType The token's type.
     * @param startOffset The offset in the document at which this token occurs.
     */
    @Override
    public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
        super.addToken(array, start, end, tokenType, startOffset);
        zzStartRead = zzMarkedPos;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] getLineCommentStartAndEnd(int languageIndex) {
        return new String[]{"#", null};
    }

    /**
     * Returns the first token in the linked list of tokens generated from
     * <code>text</code>. This method must be implemented by subclasses so they
     * can correctly implement syntax highlighting.
     *
     * @param text The text from which to get tokens.
     * @param initialTokenType The token type we should start with.
     * @param startOffset The offset into the document at which
     * <code>text</code> starts.
     * @return The first <code>Token</code> in a linked list representing the
     * syntax highlighted text.
     */
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

        resetTokenList();
        this.offsetShift = -text.offset + startOffset;

        // Start off in the proper state.
        int state = Token.NULL;
        switch (initialTokenType) {
            case Token.LITERAL_STRING_DOUBLE_QUOTE:
                state = LONG_STRING_2;
                break;
            case Token.LITERAL_CHAR:
                state = LONG_STRING_1;
                break;
            default:
                state = Token.NULL;
        }

        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return new TokenImpl();
        }

    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the
     * old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical
     * state is set to <tt>YY_INITIAL</tt>.
     *
     * @param reader the new input stream
     */
    public final void yyreset(Reader reader) {
        // 's' has been updated.
        zzBuffer = s.array;
        /*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
         */
        //zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>true</code> if EOF was reached, otherwise
     * <code>false</code>.
     */
    private boolean zzRefill() {
        return zzCurrentPos >= s.offset + s.count;
    }

    /**
     * Creates a new scanner There is also a java.io.InputStream version of this
     * constructor.
     *
     * @param in the java.io.Reader to read input from.
     */
    public PotigolTokenMaker(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner. There is also java.io.Reader version of this
     * constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    public PotigolTokenMaker(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;
        /* index in packed string  */
        int j = 0;
        /* index in unpacked array */
        while (i < 194) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;
        /* indicate end of file */
        zzEndRead = zzStartRead;
        /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch. A value from 0 to
     * yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of yypushback(int) and
     * a match-all fallback rule) this method will only be called with things
     * that "Can't Possibly Happen". If this method is called, something is
     * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done in error
     * fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again. This number must
     * not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of
     * input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException if any I/O-Error occurs
     */
    public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = zzLexicalState;

            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = zzBufferL[zzCurrentPosL++];
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 7: {
                    addToken(Token.RESERVED_WORD);
                }
                case 14:
                    break;
                case 2: {
                    addToken(Token.IDENTIFIER);
                }
                case 15:
                    break;
                case 13: {
                    addToken(Token.FUNCTION);
                }
                case 16:
                    break;
                case 12: {
                    addToken(Token.LITERAL_NUMBER_FLOAT);
                }
                case 17:
                    break;
                case 4: {
                    addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
                }
                case 18:
                    break;
                case 9: {
                    addToken(Token.WHITESPACE);
                }
                case 19:
                    break;
                case 11: {
                    addToken(Token.ERROR_NUMBER_FORMAT);
                }
                case 20:
                    break;
                case 8: {
                    addToken(Token.COMMENT_EOL);
                }
                case 21:
                    break;
                case 1: {
                    addToken(Token.ERROR_IDENTIFIER);
                }
                case 22:
                    break;
                case 6: {
                    addToken(Token.OPERATOR);
                }
                case 23:
                    break;
                case 3: {
                    addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
                }
                case 24:
                    break;
                case 5: {
                    addNullToken();
                    return firstToken;
                }
                case 25:
                    break;
                case 10: {
                    addToken(Token.SEPARATOR);
                }
                case 26:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        switch (zzLexicalState) {
                            case YYINITIAL: {
                                addNullToken();
                                return firstToken;
                            }
                            case 242:
                                break;
                            case LONG_STRING_2: {
                                if (firstToken == null) {
                                    addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
                                }
                                return firstToken;
                            }
                            case 243:
                                break;
                            default:
                                return null;
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }

}
